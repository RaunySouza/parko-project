// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var app, autoIncrement, bodyParser, consign, cookieParser, express, favicon, logger, mongoDbUrl, mongoose, parko, passport, path;

  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  autoIncrement = require('mongoose-auto-increment');

  passport = require('passport');

  consign = require('consign');

  mongoose = require('mongoose');

  mongoDbUrl = process.env.MONGODB_URL || 'mongodb://192.168.99.100/parko-project';

  mongoose.connect(mongoDbUrl);

  autoIncrement.initialize(mongoose);

  app = express();

  app.set('view engine', 'jade');

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use(function(req, res, next) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type, Authorization');
    next();
  });

  parko = {
    express: express,
    app: app,
    db: {
      mongoose: mongoose,
      plugins: {
        autoIncrement: autoIncrement
      }
    },
    createRouter: function() {
      return this.express.Router();
    },
    registerRoute: function(name, router) {
      this.app.use(name, router);
    },
    registerModel: function(name, schema) {
      schema.plugin(this.db.plugins.autoIncrement.plugin, {
        model: name,
        field: id,
        startAt: 1
      });
      return this.db.mongoose.model(name, schema);
    }
  };

  consign().include('modules').then('models').then('controllers').then('routes').into(parko);

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    next(err);
  });

  if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: {}
    });
  });

  module.exports = app;

}).call(this);
